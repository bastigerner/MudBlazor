@namespace MudBlazor
@typeparam T

@if (Column == null)
{
    <MudItem xs="1" Class="d-flex">
        <MudIconButton Class="remove-filter-button" Icon="@Icons.Material.Filled.Close" OnClick="@RemoveFilter" Size="@Size.Small" Style="align-self:flex-end"></MudIconButton>
    </MudItem>
    <MudItem xs="4">
        <MudSelect T="string" Value="@Field" ValueChanged="FieldChanged" FullWidth="true" Label="Column" Dense="true" Margin="@Margin.Dense">
            @if (DataGrid?.RenderedColumns != null)
            {
                @foreach (var column in DataGrid?.RenderedColumns ?? Enumerable.Empty<Column<T>>())
                {
                    if (column.Filterable == null || (column.Filterable.HasValue && column.Filterable.Value))
                    {
                        <MudSelectItem Value="@column.Field">@column.computedTitle</MudSelectItem>
                    }
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="3">
        <MudSelect Value="Operator" ValueChanged="OperatorChanged" FullWidth="true" Label="Operator" Dense="true" Margin="@Margin.Dense"
            Class="filter-operator">
            @foreach (var o in FilterOperator.GetOperatorByDataType(dataType))
            {
                <MudSelectItem Value="@o">@o</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        @if (dataType == typeof(string) && !(Operator ?? "").EndsWith("empty"))
        {
            <MudTextField T="string" Value="@_valueString" ValueChanged="@StringValueChanged" FullWidth="true" Label="Value" Placeholder="Filter value" Margin="@Margin.Dense" 
                Immediate="true" Class="filter-input" />
        }
        else if (isNumber && !(Operator ?? "").EndsWith("empty"))
        {
            <MudNumericField T="double?" Value="@_valueNumber" ValueChanged="@NumberValueChanged" FullWidth="true" Label="Value" Placeholder="Filter value" Margin="@Margin.Dense" 
            Immediate="true" Class="filter-input" />
        }
        else if (isEnumFlags)
        {
            <MudSelect T="Enum" Value="@_valueEnumFlags" SelectedValuesChanged="@EnumFlagsValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense" MultiSelection=true>
                @if (dataType != null && dataType.IsEnum)
                {
                    foreach (var item in Enum.GetValues(dataType))
                    {
                        if (Convert.ToUInt64(item) != 0)
                        {
                            <MudSelectItem T="Enum" Value="@((Enum)item)">@item</MudSelectItem>
                        }
                    }
                }
            </MudSelect>
        }
        else if (isEnum)
        {
            <MudSelect T="Enum" Value="@_valueEnum" ValueChanged="@EnumValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense"
                Class="filter-input">
                <MudSelectItem T="Enum" Value="@(null)"></MudSelectItem>
                @foreach (var item in Enum.GetValues(dataType))
                {
                    <MudSelectItem T="Enum" Value="@((Enum)item)">@item</MudSelectItem>
                }
            </MudSelect>
        }
        else if (dataType == typeof(bool))
        {
            <MudSelect T="bool?" Value="@_valueBool" ValueChanged="@BoolValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense"
                Class="filter-input">
                <MudSelectItem T="bool?" Value="@(null)">@("<null>")</MudSelectItem>
                <MudSelectItem T="bool?" Value="@(true)">true</MudSelectItem>
                <MudSelectItem T="bool?" Value="@(false)">false</MudSelectItem>
            </MudSelect>
        }
        else if ((dataType == typeof(DateTime) || dataType == typeof(DateTime?)) && !(Operator ?? "").EndsWith("empty"))
        {
            <MudGrid Spacing="0">
                <MudItem xs="12">
                    <MudDatePicker Date="@_valueDate" DateChanged="@DateValueChanged" Margin="@Margin.Dense" Class="filter-input-date" />
                </MudItem>
            </MudGrid>
        }
    </MudItem>
}
else 
{
    <MudItem xs="12">
        <MudSelect Value="Operator" ValueChanged="OperatorChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense"
            Class="filter-operator">
            @foreach (var o in FilterOperator.GetOperatorByDataType(dataType))
            {
                <MudSelectItem Value="@o">@o</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        @if (dataType == typeof(string) && !(Operator ?? "").EndsWith("empty"))
        {
            <MudTextField T="string" Value="@_valueString" ValueChanged="@StringValueChanged" FullWidth="true" Placeholder="Filter value" Margin="@Margin.Dense" 
            Immediate="true" Class="filter-input" />
        }
        else if (isNumber && !(Operator ?? "").EndsWith("empty"))
        {
            <MudNumericField T="double?" Value="@_valueNumber" ValueChanged="@NumberValueChanged" FullWidth="true" Placeholder="Filter value" Margin="@Margin.Dense" 
            Immediate="true" Class="filter-input" />
        }
        else if (isEnumFlags)
        {
            <MudSelect T="Enum" Value="@_valueEnumFlags" SelectedValuesChanged="@EnumFlagsValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense" MultiSelection=true>
                @if (dataType != null && dataType.IsEnum)
                {
                    foreach (var item in Enum.GetValues(dataType))
                    {
                        if (Convert.ToUInt64(item) != 0)
                        {
                            <MudSelectItem T="Enum" Value="@((Enum)item)">@item</MudSelectItem>
                        }
                    }
                }
            </MudSelect>
        }
        else if (isEnum)
        {
            <MudSelect T="Enum" Value="@_valueEnum" ValueChanged="@EnumValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense"
                Class="filter-input">
                <MudSelectItem T="Enum" Value="@(null)"></MudSelectItem>
                @foreach (var item in Enum.GetValues(dataType))
                {
                    <MudSelectItem T="Enum" Value="@((Enum)item)">@item</MudSelectItem>
                }
            </MudSelect>
        }
        else if (dataType == typeof(bool))
        {
            <MudSelect T="bool?" Value="@_valueBool" ValueChanged="@BoolValueChanged" FullWidth="true" Dense="true" Margin="@Margin.Dense"
                Class="filter-input">
                <MudSelectItem T="bool?" Value="@(null)"></MudSelectItem>
                <MudSelectItem T="bool?" Value="@(true)">true</MudSelectItem>
                <MudSelectItem T="bool?" Value="@(false)">false</MudSelectItem>
            </MudSelect>
        }
        else if ((dataType == typeof(DateTime) || dataType == typeof(DateTime?)) && !(Operator ?? "").EndsWith("empty"))
        {
            <MudGrid Spacing="0">
                <MudItem xs="12">
                    <MudDatePicker Date="@_valueDate" DateChanged="@DateValueChanged" Margin="@Margin.Dense" Class="filter-input-date" />
                </MudItem>
            </MudGrid>
        }
    </MudItem>

}